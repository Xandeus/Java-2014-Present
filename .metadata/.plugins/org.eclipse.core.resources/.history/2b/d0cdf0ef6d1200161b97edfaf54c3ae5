package binaryTrees;
//ï¿½ A+ Computer Science  -  www.apluscompsci.com
//Name -  
//Date -
//Class - 
//Lab  -

public class TreeNode implements Treeable, Comparable
{
	private Comparable treeNodeValue;
	private TreeNode leftTreeNode;
	private TreeNode rightTreeNode;
	private int level;
	private boolean isLeft;
	public TreeNode( )
	{
		treeNodeValue = null;
		leftTreeNode = null;
		rightTreeNode = null;
	}

	public TreeNode(Comparable value,int l,boolean b)
	{
		treeNodeValue = value;
		level = l;
		isLeft = b;
		leftTreeNode = null;
		rightTreeNode = null;
	}

	public TreeNode(Comparable value, TreeNode left, TreeNode right, int l,boolean b)
	{
		treeNodeValue = value;
		leftTreeNode = left;
		rightTreeNode = right;
		level = l;
		isLeft = b;
	}

	public Comparable getValue()
	{
		return treeNodeValue;
	}

	public TreeNode getLeft()
	{
		return leftTreeNode;
	}

	public TreeNode getRight()
	{
		return rightTreeNode;
	}
	public int getLevel(){
		return level;
	}
	public boolean isLeft(){
		return isLeft;
	}
	public void setValue(Comparable value)
	{
		treeNodeValue = value;
	}

	public void setLeft(Treeable left)
	{
		leftTreeNode = (TreeNode)left;
	}

	public void setRight(Treeable right)
	{
		rightTreeNode = (TreeNode)right;
	}

	public int compareTo(Object tree) {
		// TODO Auto-generated method stub
		if(getLevel() > tree.getLevel()){
			return -1;
		}
		else if(getLevel() < tree.getLevel()){
			return 1;
		}	
		return 0;
	}

	@Override
	public int compareTo(Object o) {
		// TODO Auto-generated method stub
		System.out.println("OHHH NOOOOO!");
		return 0;
	}
}
