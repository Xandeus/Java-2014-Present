package fractals;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.ArrayList;

import javax.swing.JFrame;
import javax.swing.JPanel;

public class FractalGUI extends JPanel {
	static JFrame frame = new JFrame("Fractals");
	ArrayList<ArrayList<Shape>> allObjects = new ArrayList<ArrayList<Shape>>();
	ArrayList<Shape> fractal = new ArrayList<Shape>();

	public static void frame() throws InterruptedException {
		FractalGUI game = new FractalGUI();
		frame.add(game);
		frame.setResizable(true);
		frame.setSize(1500, 900);
		frame.setLocation(300, 10);
		frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
		// frame.setExtendedState(JFrame.MAXIMIZED_BOTH);
		frame.setUndecorated(true);
		frame.setVisible(true);
		frame.setFocusable(true);
		while (true) {
			game.loop();
			game.repaint();
			Thread.sleep(1);
		}
	}

	public void loop() {
		if (allObjects.size() < 10) {
			drawShape((int) (Math.random() * 200), 200, 100);
			ArrayList<Shape> temp = fractal;
			allObjects.add(temp);
		}
	}

	public void drawShape(int x, int y, int r) {
		fractal.add(new Shape(x, y, r));
		if (r > 10) {
			drawShape(x - r / 2, y + r / 4, r / 2);
			drawShape(x + r / 4, y - r / 2, r / 2);

			drawShape(x + r, y + r / 4, r / 2);
			drawShape(x + r / 4, y + r, r / 2);
		}
	}

	public void paint(Graphics g) {
		super.paint(g);
		Graphics2D g2d = (Graphics2D) g;
		g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, RenderingHints.VALUE_ANTIALIAS_ON);
		g2d.setColor(Color.black);
		g2d.fillRect(0, 0, frame.getWidth(), frame.getHeight());
		for (ArrayList<Shape> fractal : allObjects) {
			for (Shape piece : fractal) {
				g2d.setColor(piece.getColor());
				g2d.drawOval(piece.getX(), piece.getY(), piece.getR(), piece.getR());
			}
		}
	}

	public static void main(String[] args) throws InterruptedException {
		frame();
	}
}
