package machinelearning;

import java.util.Random;

public class DNA {
	char[] genes;
	  float fitness;
	 
	Create DNA randomly.
	  DNA() {
	    genes = new char[target.length()];
	    for (int i = 0; i < genes.length; i++) {
	      genes[i] = (char) random(32,128);
	    }
	  }
	 
	Calculate fitness.
	  void fitness() {
	     int score = 0;
	     for (int i = 0; i < genes.length; i++) {
	        if (genes[i] == target.charAt(i)) {
	          score++;
	        }
	     }
	     fitness = float(score)/target.length();
	  }
	 
	Crossover
	  DNA crossover(DNA partner) {
	    DNA child = new DNA(genes.length);
	    int midpoint = int(random(genes.length));
	    for (int i = 0; i < genes.length; i++) {
	      if (i > midpoint) child.genes[i] = genes[i];
	      else              child.genes[i] = partner.genes[i];
	    }
	    return child;
	  }
	 
	Mutation
	  void mutate(float mutationRate) {
	    for (int i = 0; i < genes.length; i++) {
	      if (random(1) < mutationRate) {
	        genes[i] = (char) random(32,128);
	      }
	    }
	  }
	 
	Convert to String—PHENOTYPE.
	  String getPhrase() {
	    return new String(genes);
	  }
	 
}
