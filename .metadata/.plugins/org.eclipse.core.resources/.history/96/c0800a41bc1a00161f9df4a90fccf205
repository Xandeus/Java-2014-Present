package machinelearning;

import java.awt.Color;
import java.awt.Point;
import java.util.Random;

public class Pathfinder {
	Random rand = new Random();
	int[] movements = new int[5];
	float fitness;
	int posX,posY;
	int sX = 100, sy = 500;
	Color color;
	public Pathfinder(){
		color =  new Color((int) (Math.random() * 255), (int) (Math.random() * 255), (int) (Math.random() * 255));
		for(int i = 0; i<movements.length;i++){
			movements[i] = rand.nextInt(4);
		}
	}
	public Color getColor(){
		return color;
	}
	float fitness(Point target,int squareSize){
		double x1 = target.getX();
		double y1 = target.getY();
		Point p = updatePosition(squareSize);
		float endDistance = (float)(Math.sqrt(((Math.pow((x1-p.x), 2)+Math.pow((y1-p.y), 2)))));
		fitness = (float)(1-(endDistance/1000));
//		for(int x : movements){
//			System.out.println("Start");
//			System.out.println(x);
//		}
		return fitness;
	}
	Pathfinder crossover(Pathfinder partner) {
		Pathfinder child = new Pathfinder();
		int midpoint = (rand.nextInt(movements.length));
		for (int i = 0; i < movements.length; i++) {
			if (i > midpoint)
				child.movements[i] = movements[i];
			else
				child.movements[i] = partner.movements[i];
		}
		color =  new Color((int) (Math.random() * 255), (int) (Math.random() * 255), (int) (Math.random() * 255));
		return child;
	}

	void mutate(float mutationRate) {
		for (int i = 0; i < movements.length; i++) {
			if (Math.random() < mutationRate) {
				movements[i] = rand.nextInt(5);
			}
		}
	}
	public void move(int command,int squareSize){
		//0 is left, 1 is right, 2 is up, 3 is down, 4 is no movement
		switch(command){
		case 0:
			posX-=squareSize;
			break;
		case 1:
			posX+=squareSize;
			break;
		case 2:
			posY-=squareSize;
			break;
		case 3:
			posY+=squareSize;
			break;
		case 4:
			break;
		}
	}
	public void resetPos(){
		posX = 100;
		posY = 500;
	}
	public int[] getMoves(){
		return movements;
	}
	public Point updatePosition(int squareSize){
		int sx = posX;
		int sy = posY;
		for(int x : movements){
			move(x,squareSize);
		}

		Point p = new Point(posX, posY);
		posX = sx;
		posY = sy;
		return p;
	}
}
