package Chess;

import java.awt.Color;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;

import javax.imageio.ImageIO;

public class Rook extends GamePiece {
	ArrayList<GamePiece> validMoves;

	public Rook(int x, int y, Color color, int posX, int posY) {
		super(x, y, color, posX, posY);
		try {
			if (getColor() == Color.white)
				image = ImageIO.read(new File(
						"C:\\Users\\Alex\\Dropbox\\Programming\\JavaAsus\\GridPlace\\src\\resources\\whiteRook.png"));
			else
				image = ImageIO.read(new File(
						"C:\\Users\\Alex\\Dropbox\\Programming\\JavaAsus\\GridPlace\\src\\resources\\blackRook.png"));
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		setImage(image);
		setName("Rook");
		// TODO Auto-generated constructor stub
	}

	public boolean isMoveValid(GamePiece desiredMove, GamePiece[][] pieces) {
		validMoves = findValidMoves(pieces);
		for (GamePiece p : validMoves) {
			if ((p.getPosX() == desiredMove.getPosX()) && (p.getPosY() == desiredMove.getPosY())) {
				return true;
			}
		}
		return false;
	}

	public ArrayList<GamePiece> findValidMoves(GamePiece[][] pieces) {
		// TODO Auto-generated method stub
		validMoves = new ArrayList<GamePiece>();
		int posX = this.getPosX();
		int posY = this.getPosY();

		for (int x = posX - 1; x >= 0 + posX; x--) {
			if (pieces[x][posY].getName().equals("null")) {
				validMoves.add(pieces[x][posY]);
				System.out.println("added left");
			}
		}

		for (int x = posX + 1; x < 8 - posX; x++) {
			if (pieces[x][posY].getName().equals("null")) {
				validMoves.add(pieces[x][posY]);
			}
		}
		for (int y = posY + 1; y < 8 - posY; y++) {
			if (pieces[posX][y].getName().equals("null")) {
				validMoves.add(pieces[posX][y]);
			}
		}
		for (int y = posY - 1; y >= 0 + posY; y--) {
			if (pieces[posX][y].getName().equals("null")) {
				validMoves.add(pieces[posX][y]);
			}
		}

		return validMoves;
	}

}
