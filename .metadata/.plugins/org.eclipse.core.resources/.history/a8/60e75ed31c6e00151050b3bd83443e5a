package Chess;

import java.awt.Color;
import java.io.File;
import java.util.ArrayList;

import javax.imageio.ImageIO;

public class Pawn extends GamePiece {
	int endVal = 3;
	boolean fMove = true;
	ArrayList<GamePiece> validMoves;
    File file = new File("C:\\Users\\Alex\\Dropbox\\Programming\\JavaAsus\\GridPlace\\src\\resources\\whitePawn.png");
	image = ImageIO.read( new File("C:\\Users\\Alex\\Dropbox\\Programming\\JavaAsus\\GridPlace\\src\\resources\\whitePawn.png"));
	public Pawn(int x, int y, Color color, int posX, int posY) {
		super(x, y, color, posX, posY);
		setName("pawn");
		setImage(image);
	}

	public boolean isMoveValid(GamePiece desiredMove, GamePiece[][] pieces) {
		// TODO Auto-generated method stub
		System.out.println(this.getColor());
		validMoves = findValidMoves(pieces);
		for (GamePiece p : validMoves) {
			System.out.println(p.getPosY() + " " + desiredMove.getPosX());
			if ((p.getPosX() == desiredMove.getPosX()) && (p.getPosY() == desiredMove.getPosY())) {
				fMove = false;
				return true;
			}
		}
		return false;
	}

	@Override
	public ArrayList<GamePiece> findValidMoves(GamePiece[][] pieces) {
		validMoves = new ArrayList<GamePiece>();
		int posX = this.getPosX();
		int posY = this.getPosY();
		if (!fMove) {
			endVal = 2;
		}
		if (this.getColor() == Color.RED) {
			for (int y = posY + 1; y < posY + endVal; y++) {
				if (pieces[posX - 1][posY + 1].getColor() != Color.cyan
						&& !pieces[posX - 1][posY + 1].getName().equals("null")) {
					validMoves.add(pieces[posX - 1][posY + 1]);
				}if (pieces[posX + 1][posY + 1].getColor() != Color.cyan
						&& !pieces[posX + 1][posY + 1].getName().equals("null")) {
					validMoves.add(pieces[posX + 1][posY + 1]);
				}
				if (pieces[posX][y].getName().equals("null")) {
					validMoves.add(pieces[posX][y]);
				}
				else
					return validMoves;
			}
		} else
			for (int y = posY - 1; y > posY - endVal; y--) {
				// Moving forward
				if (pieces[posX - 1][posY - 1].getColor() != Color.cyan
						&& !pieces[posX - 1][posY - 1].getName().equals("null")) {
					validMoves.add(pieces[posX - 1][posY - 1]);
				}if (pieces[posX + 1][posY - 1].getColor() != Color.cyan
						&& !pieces[posX + 1][posY - 1].getName().equals("null")) {
					validMoves.add(pieces[posX + 1][posY - 1]);
				}
				if (pieces[posX][y].getName().equals("null")) {
					validMoves.add(pieces[posX][y]);
				}
				else
					return validMoves;
				 
			}
		return validMoves;
	}
}
